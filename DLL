#include <windows.h>
#include <tlhelp32.h>
#include <iostream>
#include <fstream>
#include <string>
#include <stdexcept>

void log_message(const std::string& message) {
    std::ofstream log_file("injector_log.txt", std::ios_base::app);
    log_file << "[" << __TIME__ << "] " << message << std::endl;
}

extern "C" __declspec(dllexport) void terminate_roblox_process() {
    try {
        HANDLE snapshot_handle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (snapshot_handle == INVALID_HANDLE_VALUE) {
            throw std::runtime_error("failed_to_create_snapshot_of_processes");
        }
        PROCESSENTRY32 process_entry;
        process_entry.dwSize = sizeof(process_entry);
        if (Process32First(snapshot_handle, &process_entry)) {
            do {
                if (_wcsicmp(process_entry.szExeFile, L"RobloxPlayerBeta.exe") == 0) {
                    HANDLE process_handle = OpenProcess(PROCESS_TERMINATE, FALSE, process_entry.th32ProcessID);
                    if (process_handle != NULL) {
                        TerminateProcess(process_handle, 0);
                        CloseHandle(process_handle);
                        log_message("roblox_process_terminated");
                    } else {
                        throw std::runtime_error("failed_to_open_roblox_process_for_termination");
                    }
                }
            } while (Process32Next(snapshot_handle, &process_entry));
        }
        CloseHandle(snapshot_handle);
    } catch (const std::exception& ex) {
        log_message(std::string("error_in_terminate_roblox_process: ") + ex.what());
    }
}

extern "C" __declspec(dllexport) void execute_script(const char* script) {
    try {
        log_message("executing_script: " + std::string(script));
        std::cout << "executing_script: " << script << std::endl;
    } catch (const std::exception& ex) {
        log_message(std::string("error_executing_script: ") + ex.what());
    }
}

extern "C" __declspec(dllexport) void set_configuration(const char* config_name, const char* config_value) {
    try {
        log_message("setting_config: " + std::string(config_name) + " = " + std::string(config_value));
    } catch (const std::exception& ex) {
        log_message(std::string("error_setting_config: ") + ex.what());
    }
}

BOOL APIENTRY DllMain(HMODULE module_handle, DWORD reason_for_call, LPVOID reserved) {
    switch (reason_for_call) {
    case DLL_PROCESS_ATTACH:
        log_message("dll_loaded");
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        log_message("dll_unloaded");
        break;
    }
    return TRUE;
}
